load(cachematrix.R)
library(cachematrix.R)
library("cachematrix.R")
load("cachematrix.R")
load("cachematrix.R")
load("cachematrix.R")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## This function requires matrix as an input, but generates list of functions to access the data using Lexical scoping
## Use of Lexical scoping enables it to cache values to save processing time and memory in certain cases
makeCacheMatrix <- function(x = matrix()) {
##  object inv set to NULL , which is current in context of this function
inv <- NULL
set <- function(y) {
## object mx and inv assigned, but not in the current context so they are available outside this function (Lexical scoping). Note the <<- operator
mx <<- y
inv <<- NULL
}
## This returns value of mx , which was set using above function but still available outside where it was defined
get <- function() mx
## This sets value of inv, which was defined above but available outside where it was defined
setinv <-function(invm) inv <<- invm
## This returns value of inv, as it is available outside where it was defined using the <<- operator
getinv <- function() inv
## This returns a list of function defined above
list(set-set,get=get,setinv=setinv,getinv=getinv)
}
## This function takens the list of functions and associated cache variables created by makeCacheMatrix function above
## It then returns inverse of the matrix if it was already calculated and cached, else it calculates then sets the cache value and returns the inverted matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## This executes getinv() function from the list of functions to get cached value of inverted matrix
inv <- x$getinv()
## If the cache value is available it returns it, else it calculates
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
## If cache value of inverted matrix is not available, it get calculated below
## This gets cached matrix through the get() function in the input list of functions
data <-x$get()
## This creates inverse of the matrix stored in data
inv <- solve(data,...)
## This sets the cache value of inverse matrix, for future reuse
X$setinv(inv)
## Returns inverse of the matrix x
inv
}
ls()
mt1 <- matrix(c(1,3,2,2),2,2)
mtc1 <- makeCacheMatrix(mt1)
class(mt1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## This function requires matrix as an input, but generates list of functions to access the data using Lexical scoping
## Use of Lexical scoping enables it to cache values to save processing time and memory in certain cases
makeCacheMatrix <- function(mx = matrix()) {
##  object inv set to NULL , which is current in context of this function
inv <- NULL
set <- function(y) {
## object mx and inv assigned, but not in the current context so they are available outside this function (Lexical scoping). Note the <<- operator
mx <<- y
inv <<- NULL
}
## This returns value of mx , which was set using above function but still available outside where it was defined
get <- function() mx
## This sets value of inv, which was defined above but available outside where it was defined
setinv <-function(invm) inv <<- invm
## This returns value of inv, as it is available outside where it was defined using the <<- operator
getinv <- function() inv
## This returns a list of function defined above
list(set-set,get=get,setinv=setinv,getinv=getinv)
}
## This function takens the list of functions and associated cache variables created by makeCacheMatrix function above
## It then returns inverse of the matrix if it was already calculated and cached, else it calculates then sets the cache value and returns the inverted matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## This executes getinv() function from the list of functions to get cached value of inverted matrix
inv <- x$getinv()
## If the cache value is available it returns it, else it calculates
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
## If cache value of inverted matrix is not available, it get calculated below
## This gets cached matrix through the get() function in the input list of functions
data <-x$get()
## This creates inverse of the matrix stored in data
inv <- solve(data,...)
## This sets the cache value of inverse matrix, for future reuse
X$setinv(inv)
## Returns inverse of the matrix x
inv
}
ls()
mtc1 <- makeCacheMatrix(mt1)
rm(ls(list.ALL=TRUE))
rm(ls())
ls()
mt1
mtc1 <- makeCacheMatrix(mt1)
## Following functions show use of Lexical Scoping to enable caching functionality in R.
## Caching could save processing and memory in certain situations.
## This function requires matrix as an input, but generates list of functions to access the data using Lexical scoping
## Use of Lexical scoping enables it to cache values to save processing time and memory in certain cases
makeCacheMatrix <- function(mx = matrix()) {
##  object inv set to NULL , which is current in context of this function
inv <- NULL
set <- function(y) {
## object mx and inv assigned, but not in the current context so they are available outside this function (Lexical scoping). Note the <<- operator
mx <<- y
inv <<- NULL
}
## This returns value of mx , which was set using above function but still available outside where it was defined
get <- function() mx
## This sets value of inv, which was defined above but available outside where it was defined
setinv <-function(invm) inv <<- invm
## This returns value of inv, as it is available outside where it was defined using the <<- operator
getinv <- function() inv
## This returns a list of function defined above
list(set-set,get=get,setinv=setinv,getinv=getinv)
}
## This function takens the list of functions and associated cache variables created by makeCacheMatrix function above
## It then returns inverse of the matrix if it was already calculated and cached, else it calculates then sets the cache value and returns the inverted matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## This executes getinv() function from the list of functions to get cached value of inverted matrix
inv <- x$getinv()
## If the cache value is available it returns it, else it calculates
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
## If cache value of inverted matrix is not available, it get calculated below
## This gets cached matrix through the get() function in the input list of functions
data <-x$get()
## This creates inverse of the matrix stored in data
inv <- solve(data,...)
## This sets the cache value of inverse matrix, for future reuse
X$setinv(inv)
## Returns inverse of the matrix x
inv
}
mtc1 <- makeCacheMatrix(mt1)
makeCacheMatrix()
makeCacheMatrix
mtc1 <- makeCacheMatrix(mt1)
makeCacheMatrix <- function(mx = matrix()) {
inv <- NULL
set <- function(y) {
mx <<- y
inv <<- NULL
}
get <- function() mx
setinv <- function(invm) inv <<- invm
getinv <- function() inv
list(set-set,get=get,setinv=setinv,getinv=getinv)
}
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <-x$get()
inv <- solve(data,...)
X$setinv(inv)
inv
}
ls()
mtc1 <- makeCacheMatrix(mt1)
version()
version
rm(list=ls())
ls()
makeCacheMatrix <- function(mx = matrix()) {
inv <- NULL
set <- function(y) {
mx <<- y
inv <<- NULL
}
get <- function() mx
setinv <- function(invm) inv <<- invm
getinv <- function() inv
list(set-set,get=get,setinv=setinv,getinv=getinv)
}
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <-x$get()
inv <- solve(data,...)
X$setinv(inv)
inv
}
mt1<- matrix(c(1,3,2,2),2,2)
mt1
mct1 <- makeCacheMatrix(mt1)
makeCacheMatrix <- function(mx = matrix()) {
inv <- NULL
set <- function(y) {
mx <<- y
inv <<- NULL
}
get <- function() mx
setinv <- function(invm) inv <<- invm
getinv <- function() inv
list(set-set,get=get,setinv=setinv,getinv=getinv)
}
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <-x$get()
inv <- solve(data,...)
X$setinv(inv)
inv
}
mct1 <- makeCacheMatrix(mt1)
load("C:/Users/kunal/Documents/.RData")
ls()
mt1
mv1
mv1 <- makeCacheMatrix((mt1)
)
mv1
ls()
rm(list=ls())
ls()
ls()
function(mx=matrix()) {
inv <- NULL
set <- function(y) {
mx <<-y
inv <<- NULL
}
get <- function() mx
setinv <- function(invm) inv <<- invm
getinv <- function() inv
list(set=set, get=get,setinv=setinv,getinv=getinv)
}
function(x,...) {
inv<-x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data,...)
x$setinv(inv)
inv
}
ls()
ls()
function(mx=matrix()) {
inv <- NULL
set <- function(y) {
mx <<-y
inv <<- NULL
}
get <- function() mx
setinv <- function(invm) inv <<- invm
getinv <- function() inv
list(set=set, get=get,setinv=setinv,getinv=getinv)
}
function(x,...) {
inv<-x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data,...)
x$setinv(inv)
inv
}
ls()
load("cachematrix.R")
ls()
load("cachematrix.R")
source("cachematrix.R")
mtx <- matrix(c(1,3,2,2),2,2)
mtx
cmtx <- makeCacheMatrix(mtx)
cacheSolve(cmtx)
ccmtx
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(mx = matrix()) {
inv <- NULL
set <- function(y) {
mx <<-y
inv <<- NULL
}
get <- function() mx
setinv <- function(invm) inv <<- invm
getinv <- function() inv
list(set=set, get=get,setinv=setinv,getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data,...)
x$setinv(inv)
inv
}
cmtx <- makeCacheMatrix(mtx)
cmtx
cacheSolve(cmtx)
cacheSolve(cmtx)
source("cachematrix.R")
ls()
mtx
source("cachematrix.R")
ls()
mtx <- matrix(c(1,3,2,2),2,2)
mtx
cmtx <- makeCacheMatrix(mtx)
cmtx
cmtx$get()
cacheSolve(cmtx)
cacheSolve(cmtx)
mtx*cacheSolve(cmtx)==cacheSolve(cmtx)*mtx
